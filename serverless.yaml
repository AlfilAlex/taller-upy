service: recreahub
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x   
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  cfnRole: arn:aws:iam::676373376027:role/cfnRole-role
  iam:
    role: arn:aws:iam::676373376027:role/recreahub-lambda-rol

  httpApi:  
    cors: true
    authorizers:
      customAuthorizer:
        type: request
        functionName: authorizerFunc
        payloadVersion: '2.0'
        enableSimpleResponses: true

  environment:  
    DYNAMO_TABLE_NAME: ${self:custom.dynamoTableName}
    MUST_CREATE_TABLE: false
    # S3_BUCKET_NAME: ${self:custom.s3BucketName}
    # NODE_PATH: /opt/


functions:
  
  authorizerFunc:
    handler: index.authorizer
    memorySize: 128
    timeout: 5

  
  createLot:
    handler: index.createLot
    memorySize: 256
    timeout: 10
    events:
      - httpApi:
          method: POST
          path: /lots
    layers:
      - {Ref: CommonModulesLambdaLayer}

  
  # GeneratePresignedUrlFn:
  #   handler: index.GeneratePresignedUrlFn
  #   memorySize: 128
  #   timeout: 5
  #   events:
  #     - httpApi:
  #         method: POST
  #         path: /lots/{lotId}/presigned
  #   layers:
  #     - {Ref: CommonModulesLambdaLayer}

  
  listLots:
    handler: index.listLots
    memorySize: 128
    timeout: 5
    events:
      - httpApi:
          method: GET
          path: /lots
    layers:
      - {Ref: CommonModulesLambdaLayer}

  
  reserveLot:
    handler: index.reserveLots
    memorySize: 128
    timeout: 5
    events:
      - httpApi:
          method: PUT   
          path: /lots/{lotId}/reserve
    layers:
      - {Ref: CommonModulesLambdaLayer}

layers:
  CommonModules:
    path: ../layers/common
    compatibleRuntimes:
      - nodejs20.x
    description: Common layer for shared dependencies

custom:
  dynamoTableName: ${self:service}-lots-${opt:stage, 'dev'}
  s3BucketName:   ${self:service}-lots-${opt:stage, 'dev'}
